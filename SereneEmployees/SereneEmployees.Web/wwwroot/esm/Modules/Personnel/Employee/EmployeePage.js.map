{
  "version": 3,
  "sources": ["../../../../../Modules/Personnel/Employee/EmployeePage.tsx", "../../../../../Modules/ServerTypes/Personnel/EmployeeColumns.ts", "../../../../../Modules/ServerTypes/Personnel/EmployeeForm.ts", "../../../../../Modules/ServerTypes/Personnel/EmployeeRow.ts", "../../../../../Modules/ServerTypes/Personnel/EmployeeService.ts", "../../../../../Modules/Personnel/Employee/EmployeeGrid.tsx", "../../../../../Modules/Personnel/Employee/EmployeeDialog.tsx"],
  "sourcesContent": ["\uFEFFimport { gridPageInit } from '@serenity-is/corelib';\r\nimport { EmployeeGrid } from './EmployeeGrid';\r\n\r\nexport default () => gridPageInit(EmployeeGrid);", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { EmployeeRow } from \"./EmployeeRow\";\n\nexport interface EmployeeColumns {\n    Id: Column<EmployeeRow>;\n    FullName: Column<EmployeeRow>;\n    HireDate: Column<EmployeeRow>;\n    Age: Column<EmployeeRow>;\n    Salary: Column<EmployeeRow>;\n}\n\nexport class EmployeeColumns extends ColumnsBase<EmployeeRow> {\n    static readonly columnsKey = 'Personnel.Employee';\n    static readonly Fields = fieldsProxy<EmployeeColumns>();\n}", "\uFEFFimport { StringEditor, DateEditor, DecimalEditor, ImageUploadEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface EmployeeForm {\n    FullName: StringEditor;\n    HireDate: DateEditor;\n    BirthDate: DateEditor;\n    Salary: DecimalEditor;\n    Image: ImageUploadEditor;\n}\n\nexport class EmployeeForm extends PrefixedContext {\n    static readonly formKey = 'Personnel.Employee';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!EmployeeForm.init)  {\n            EmployeeForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = DateEditor;\n            var w2 = DecimalEditor;\n            var w3 = ImageUploadEditor;\n\n            initFormType(EmployeeForm, [\n                'FullName', w0,\n                'HireDate', w1,\n                'BirthDate', w1,\n                'Salary', w2,\n                'Image', w3\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface EmployeeRow {\n    Id?: number;\n    FullName?: string;\n    HireDate?: string;\n    BirthDate?: string;\n    Salary?: number;\n    Image?: string;\n    Age?: number;\n}\n\nexport abstract class EmployeeRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'FullName';\n    static readonly localTextPrefix = 'Personnel.Employee';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<EmployeeRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { EmployeeRow } from \"./EmployeeRow\";\n\nexport namespace EmployeeService {\n    export const baseUrl = 'Personnel/Employee';\n\n    export declare function Create(request: SaveRequest<EmployeeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<EmployeeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<EmployeeRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<EmployeeRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<EmployeeRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<EmployeeRow>>;\n\n    export const Methods = {\n        Create: \"Personnel/Employee/Create\",\n        Update: \"Personnel/Employee/Update\",\n        Delete: \"Personnel/Employee/Delete\",\n        Retrieve: \"Personnel/Employee/Retrieve\",\n        List: \"Personnel/Employee/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>EmployeeService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { EmployeeColumns, EmployeeRow, EmployeeService } from '@/ServerTypes/Personnel';\r\nimport { Decorators, EntityGrid } from '@serenity-is/corelib';\r\nimport { EmployeeDialog } from './EmployeeDialog';\r\n\r\n@Decorators.registerClass('SereneEmployees.Personnel.EmployeeGrid')\nexport class EmployeeGrid extends EntityGrid<EmployeeRow> {\n    protected getColumnsKey() { return EmployeeColumns.columnsKey; }\n    protected getDialogType() { return EmployeeDialog; }\n    protected getRowDefinition() { return EmployeeRow; }\n    protected getService() { return EmployeeService.baseUrl; }\n}", "import { EmployeeForm, EmployeeRow, EmployeeService } from '@/ServerTypes/Personnel';\r\nimport { Decorators, EntityDialog } from '@serenity-is/corelib';\n\n\r\n@Decorators.registerClass('SereneEmployees.Personnel.EmployeeDialog')\r\nexport class EmployeeDialog extends EntityDialog<EmployeeRow, any> {\r\n    protected getFormKey() { return EmployeeForm.formKey; }\r\n    protected getRowDefinition() { return EmployeeRow; }\r\n    protected getService() { return EmployeeService.baseUrl; }\r\n\r\n    protected form = new EmployeeForm(this.idPrefix);\r\n\r\n    protected validateBeforeSave(): boolean {\r\n        if (!super.validateBeforeSave()) {\r\n            return false;\r\n        }\r\n\r\n        // Parse Birth Date (since it's a string)\r\n        const birthDateString = this.form.BirthDate.value;\r\n        const birthDate = new Date(birthDateString);\r\n        if (isNaN(birthDate.getTime())) {\r\n            alert('Invalid birth date.');\r\n            return false;\r\n        }\r\n\r\n        // Calculate age\r\n        const age = this.calculateAge(birthDate);\r\n        if (age < 25 || age > 60) {\r\n                alert('Age must be between 25 and 60 years.');\r\n            return false;\r\n        }\r\n\r\n        // Parse Hire Date (since it's a string)\r\n        const hireDateString = this.form.HireDate.value;\r\n        const hireDate = new Date(hireDateString);\r\n        if (isNaN(hireDate.getTime())) {\r\n            alert('Invalid hire date.');\r\n            return false;\r\n        }\r\n\r\n        // Validate Hire Date (Must be on or after January 1st, 2020)\r\n        const minHireDate = new Date(2020, 0, 1); // January 1st, 2020\r\n        if (hireDate < minHireDate) {\r\n                alert('Hire date must be on or after January 1st, 2020.');\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // Helper function to calculate age\r\n    private calculateAge(birthDate: Date): number {\r\n        const today = new Date();\r\n        let age = today.getFullYear() - birthDate.getFullYear();\r\n        const monthDifference = today.getMonth() - birthDate.getMonth();\r\n        if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthDate.getDate())) {\r\n            age--;\r\n        }\r\n        return age;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_corelib", "import_corelib", "_EmployeeColumns", "__name", "EmployeeColumns", "import_corelib", "_EmployeeForm", "prefix", "w0", "w1", "w2", "w3", "__name", "EmployeeForm", "import_corelib", "_EmployeeRow", "__name", "EmployeeRow", "import_corelib", "EmployeeService", "x", "r", "s", "o", "import_corelib", "import_corelib", "_EmployeeDialog_decorators", "_init", "_a", "_EmployeeDialog", "EmployeeForm", "EmployeeRow", "EmployeeService", "birthDateString", "birthDate", "age", "hireDateString", "hireDate", "minHireDate", "today", "monthDifference", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "EmployeeDialog", "_EmployeeGrid_decorators", "_init", "_a", "_EmployeeGrid", "EmployeeColumns", "EmployeeDialog", "EmployeeRow", "EmployeeService", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "EmployeeGrid", "EmployeePage_default", "__name", "EmployeeGrid"]
}
